using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SecurityLibrary.AES
{
    /// <summary>
    /// If the string starts with 0x.... then it's Hexadecimal not string
    /// </summary>
    public class AES : CryptographicTechnique
    {

        public int[,] mul2 = new int[16, 16]
        {
{0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e},
{0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e},
{0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e},
{0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e},
{0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e},
{0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe},
{0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde},
{0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe},
{0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05},
{0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25},
{0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45},
{0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65},
{0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85},
{0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5},
{0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5 },
{ 0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5 }
        };

        public int[,] mul3 = new int[16, 16]
        {
{0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11},
{0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21},
{0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71},
{0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41},
{0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1},
{0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1},
{0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1},
{0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81},
{0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a},
{0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba},
{0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea},
{0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda},
{0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a},
{0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a},
{0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a },
{ 0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a }
        };

        public int[,] sBox = new int[16, 16] {
    //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
    {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76}, //0
    {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0}, //1
    {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15}, //2
    {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75}, //3
    {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84}, //4
    {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf}, //5
    {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8}, //6
    {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2}, //7
    {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73}, //8
    {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb}, //9
    {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79}, //A
    {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08}, //B
    {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a}, //C
    {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e}, //D
    {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf }, //E
    { 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } }; //F

        public int[,] revsBox = new int[16, 16] {  
    {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},  
    {0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},  
    {0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},  
    {0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},  
    {0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},  
    {0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},  
    {0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},  
    {0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},  
    {0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},  
    {0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},  
    {0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},  
    {0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},  
    {0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},  
    {0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},  
    {0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},  
    {0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D} };  

        public int[,] mat = new int[4, 4] {
            {0x02, 0x03, 0x01, 0x01},
            {0x01, 0x02, 0x03, 0x01},
            {0x01, 0x01, 0x02, 0x03},
            {0x03, 0x01, 0x01, 0x02}
            };

        public int[,] rmat = new int[4, 4] {
            {0x14, 0x11, 0x13, 0x09},
            {0x09, 0x14, 0x11, 0x13},
            {0x13, 0x09, 0x14, 0x11},
            {0x11, 0x13, 0x09, 0x14}
            };

        public int[,] RCon = new int[4, 10]
        {
            { 0x01, 0x02, 0x04, 0x08, 0x010, 0x20, 0x40, 0x80, 0x1b, 0x36 },
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
        };

        public override string Decrypt(string cipherText, string key)
        {
            throw new NotImplementedException(); 
            /*
            int[,] state = new int[4, 4];
            int[,] rKey = new int[4, 4];
            int r = 0, c = 0;
            // build rounded key and state matrices
            for (int i = 2; i < cipherText.Length; i += 2)
            {
                string cur = "";
                cur += cipherText[i];
                cur += cipherText[i + 1];
                int x = Convert.ToInt32(cur, 16);
                state[c, r] = x;
                cur = "";
                cur += key[i];
                cur += key[i + 1];
                x = Convert.ToInt32(cur, 16);
                rKey[c, r] = x;
                c++;
                if (c == 4)
                {
                    c = 0;
                    r++;
                }
            }
            
            // add the round key (10);
            {
                
            }
            // reverse shift row => right
            {
                for (int i = 1; i < 4; i++)
                {
                    int[] tmp = new int[4];
                    for (int j = 0; j < 4; j++)
                    {
                        tmp[j] = state[i, j - i + 4];
                    }
                    for (int j = 0; j < 4; j++) state[i, j] = tmp[j];
                }
            }
            // revese subBytes
            {
                for (int i = 0; i < 4; i++)
                {
                    for (int j = 0; j < 4; j++)
                    {
                        string hex = state[i, j].ToString("X");
                        if (hex.Length == 1)
                            hex = "0" + hex;
                        string a = "", b = "";
                        a += hex[0];
                        b += hex[1];
                        int row = Convert.ToInt32(a, 16);
                        int col = Convert.ToInt32(b, 16);
                        int x = revsBox[row, col];
                        state[i, j] = x;
                    }
                }
            }
            int RConID = 9;
            int[,] newRKey = new int[4, 4];
            for (int round = 9; round >= 1; round--)
            {
                // add round key (RConID = round)
                {

                }

                // reverse mix column
                {
                    int[,] newState = new int[4, 4];
                    for (int j = 0; j < 4; j++) // col -> state
                    {
                        for (int k = 0; k < 4; k++) // col elements
                        {
                            int val = 0;
                            for (int i = 0; i < 4; i++) // row -> state
                            {
                                int x = state[i, j];
                                string hex = state[i, j].ToString("X");
                                if (hex.Length == 1)
                                    hex = "0" + hex;
                                string a = "", b = "";
                                a += hex[0];
                                b += hex[1];
                                int row = Convert.ToInt32(a, 16);
                                int col = Convert.ToInt32(b, 16);
                                if (rmat[k, i] == 0x09)
                                    x = mul9[row, col];
                                else if (rmat[k, i] == 0x11)
                                    x = mul11[row, col];
                                else if (rmat[k, i] == 0x13)
                                    x = mul13[row, col];
                                else x = mul14[row, col];
                                val ^= x;
                            }
                            newState[k, j] = val;
                        }
                    }
                }

                // reverse shift row => right
                {
                    for (int i = 1; i < 4; i++)
                    {
                        int[] tmp = new int[4];
                        for (int j = 0; j < 4; j++)
                        {
                            tmp[j] = state[i, j - i + 4];
                        }
                        for (int j = 0; j < 4; j++) state[i, j] = tmp[j];
                    }
                }
                // revese subBytes
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int j = 0; j < 4; j++)
                        {
                            string hex = state[i, j].ToString("X");
                            if (hex.Length == 1)
                                hex = "0" + hex;
                            string a = "", b = "";
                            a += hex[0];
                            b += hex[1];
                            int row = Convert.ToInt32(a, 16);
                            int col = Convert.ToInt32(b, 16);
                            int x = revsBox[row, col];
                            state[i, j] = x;
                        }
                    }
                }
            }
            // add round key -> inital key
            {

            }

            //return plain text
            string plain = "0x";
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    string hex = state[j, i].ToString("X");
                    if (hex.Length == 1)
                        hex = "0" + hex;
                    plain += hex;
                }
            }
            
            return plain;
            */

        }

        public override string Encrypt(string plainText, string key)
        {
            throw new NotImplementedException();
            /*
            int[,] state = new int [4, 4];
            int[,] rKey= new int[4, 4];
            int r = 0, c = 0;
            // build rounded key and state matrices
            for (int i = 2; i < plainText.Length; i += 2)
            {
                string cur = "";
                cur += plainText[i];
                cur += plainText[i + 1];
                int x = Convert.ToInt32(cur, 16);
                state[c, r] = x;
                cur = "";
                cur += key[i];
                cur += key[i + 1];
                x = Convert.ToInt32(cur, 16);
                rKey[c, r] = x;
                c++;
                if(c == 4)
                {
                    c = 0;
                    r++;
                }
            }
            // round1: update state -> state ^ rounded key
            for (int j = 0; j < 4; j++)
                for (int i = 0; i < 4; i++)
                    state[i, j] ^= rKey[i, j];
 
            // next rounds 
            int RConID = 0;
            int[,] newRKey = new int[4, 4];
            for(int rounds = 1; rounds <= 9; rounds++)
            {
                for (int i = 0, j = 1; i < 4; i++, j++)
                {
                    newRKey[i, 0] = rKey[j % 4, 3];
                    int tmp = newRKey[i, 0];
                    // subistitute from sbox
                    string hex = newRKey[i, 0].ToString("X");
                    if (hex.Length == 1)
                        hex = "0" + hex;
                    string a = "", b = "";
                    a += hex[0];
                    b += hex[1];
                    int row = Convert.ToInt32(a, 16);
                    int col = Convert.ToInt32(b, 16);
                    int x = sBox[row, col];
                    newRKey[i, 0] = x;
                    // xor with RCon table
                    newRKey[i, 0] ^= RCon[i, RConID];
                    // xor with first col
                    newRKey[i, 0] ^= rKey[i, 0];
                }
                RConID++;
                for (int j = 1; j < 4; j++)
                    for (int i = 0; i < 4; i++)
                        newRKey[i, j] = newRKey[i, j - 1] ^ rKey[i, j];
                for (int i = 0; i < 4; i++)
                    for (int j = 0; j < 4; j++)
                        rKey[i, j] = newRKey[i, j];
 
                for (int i = 0; i < 4; i++)
                {
                    for (int j = 0; j < 4; j++)
                    {
                        string hex = state[i, j].ToString("X");
                        if (hex.Length == 1)
                            hex = "0" + hex;
                        string a = "", b = "";
                        a += hex[0];
                        b += hex[1];
                        int row = Convert.ToInt32(a, 16);
                        int col = Convert.ToInt32(b, 16);
                        int x = sBox[row, col];
                        state[i, j] = x;
                    }
                }
                // shift rows
                for (int i = 0; i < 4; i++)
                {
                    int[] tmp = new int[4];
                    for (int j = i, k = 0; j < i + 4; j++, k++)
                    {
                        tmp[k] = state[i, j % 4];
                    }
                    for (int j = 0; j < 4; j++)
                        state[i, j] = tmp[j];
                }
 
                int[,] newState = new int[4, 4];
                for (int j = 0; j < 4; j++) // col -> state
                {
                    for (int k = 0; k < 4; k++) // col elements
                    {
                        int val = 0;
                        for (int i = 0; i < 4; i++) // row -> state
                        {
                            int x = state[i, j];
                            string hex = state[i, j].ToString("X");
                            if (hex.Length == 1)
                                hex = "0" + hex;
                            string a = "", b = "";
                            a += hex[0];
                            b += hex[1];
                            int row = Convert.ToInt32(a, 16);
                            int col = Convert.ToInt32(b, 16);
                            if (mat[k, i] == 2)
                                x = mul2[row, col];
                            else if (mat[k, i] == 3)
                                x = mul3[row, col];
                            val ^= x;
                        }
                        newState[k, j] = val;
                    }
                }
                for (int i = 0; i < 4; i++)
                    for (int j = 0; j < 4; j++)
                        state[i, j] = newState[i, j];
 
                for (int j = 0; j < 4; j++)
                {
                    for (int i = 0; i < 4; i++)
                        state[i, j] ^= rKey[i, j];
                }
            }
 
 
            // final round 
            // new rounded key 
            for (int i = 0, j = 1; i < 4; i++, j++)
            {
                newRKey[i, 0] = rKey[j % 4, 3];
 
                // subistitute from sbox
                string hex = newRKey[i, 0].ToString("X");
                if (hex.Length == 1)
                    hex = "0" + hex;
                string a = "", b = "";
                a += hex[0];
                b += hex[1];
                int row = Convert.ToInt32(a, 16);
                int col = Convert.ToInt32(b, 16);
                int x = sBox[row, col];
                newRKey[i, 0] = x;
                // xor with RCon table
                newRKey[i, 0] ^= RCon[i, RConID];
                // xor with first col
                newRKey[i, 0] ^= rKey[i, 0];
            }
            RConID++;
            for (int j = 1; j < 4; j++)
                for (int i = 0; i < 4; i++)
                    newRKey[i, j] = newRKey[i, j - 1] ^ rKey[i, j];
            for (int i = 0; i < 4; i++)
                for (int j = 0; j < 4; j++)
                    rKey[i, j] = newRKey[i, j];
 
            // subbytes 
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    string hex = state[i, j].ToString("X");
                    if (hex.Length == 1)
                        hex = "0" + hex;
                    string a = "", b = "";
                    a += hex[0];
                    b += hex[1];
                    int row = Convert.ToInt32(a, 16);
                    int col = Convert.ToInt32(b, 16);
                    int x = sBox[row, col];
                    state[i, j] = x;
                }
            }
            // shift rows
            for (int i = 0; i < 4; i++)
            {
                int[] tmp = new int[4];
                for (int j = i, k = 0; j < i + 4; j++, k++)
                {
                    tmp[k] = state[i, j % 4];
                }
                for (int j = 0; j < 4; j++)
                    state[i, j] = tmp[j];
            }
            for (int j = 0; j < 4; j++)
            {
                for (int i = 0; i < 4; i++)
                    state[i, j] ^= rKey[i, j];
            }
 
            //return cipher text
            string cipher = "0x";
            for(int i = 0; i < 4; i++)
            {
                for(int j = 0; j < 4; j++)
                {
                    string hex = state[j, i].ToString("X");
                    if (hex.Length == 1)
                        hex = "0" + hex;
                    cipher += hex;
                }
            }
 
            return cipher;
            */
        }
    }
}
